<p>There are times that we need a data to be included in a table in a mandatory way, other times we will need to define one of the fields as a primary or foreign key. We will be able to do all this when we define the table, in addition to other options.</p><p>A <strong>constraint</strong> is a condition that one or several columns must compulsorily meet.</p><p>Each restriction that we create will have a name, if we do not put it, the DBMS that we are using will do so. It is convenient that we give it a name that helps us identify it and that is unique for each scheme (user). It's a good idea to somehow include the name of the table, the fields involved, and the constraint type in the name of the table.</p><h3>Syntax:</h3><p>The syntax in standard SQL is the following:</p><blockquote><pre><code>CREATE TABLE TABLE_NAME (<br /> Column1 Data_Type<br /> [CONSTRAINT constraint_name]<br /> [NOT NULL]<br /> [UNIQUE]< br /> [PRIMARY KEY]<br /> [FOREIGN KEY]<br /> [DEFAULT value]<br /> [REFERENCES tableName [(column [, column ])]<br /> [ON DELETE CASCADE]]< br /> [CHECK condition],<br /> Column2 Data_Type<br /> [CONSTRAINT constraint_name]<br /> [NOT NULL]...<br /> ,...<br />);</code ></pre></blockquote><p>Let's see an example:</p><blockquote><pre><code>CREATE TABLE USERS (<br /> Login VARCHAR(15) CONSTRAINT usu_log_PK PRIMARY KEY,<br / > Password VARCHAR(8) NOT NULL,<br /> HIRE_DATE DATE DEFAULT CURRENT_DATE<br />);</code></pre></blockquote><h2>Restriction <a href="https://www. postgresql.org/docs/14/ddl-constraints.html#id-1.5.4.6.6" target="_blank"><code>NOT NU LL</code></a>.</h2><p>With this restriction we will force that column to have a value or what is the same, it prohibits null values ​​for a column in a given table.</p ><p>We can put it when we create or modify the field by adding the word <code>NOT NULL</code> after putting the data type.</p><p>Yes in the table <code>USERS</code > we want the <code>BIRTH_DATE</code> field to be mandatory, it would look like this:</p><blockquote><pre><code>CREATE TABLE USERS (<br /> BIRTH_DATE DATE<br /> CONSTRAINT Use_BirDate_NN NOT NULL);</code></pre></blockquote><p>or, in this other way:</p><blockquote><pre><code>CREATE TABLE USERS (<br /> BIRTH_DATE DATE NOT NULL);</code></pre></blockquote><p>We must be careful with null values ​​in operations, since <code>1 * NULL</code> is equal to <code>NULL< /code>.</p><p>Exercise:</p><p>We are going to include constraints on the <code>STUDENTS</code> table seen in the previous exercise. The attributes and their types must be the same as those stated above:</p><ul><li><code>ID</code>: which contains numbers of up to 8 digits without decimals.</li><li>< code>NIF</code>: which contains a combination of numbers and letters of up to 9 characters.</li><li><code>LAST_NAME</code>: previously we have already limited the length of this attribute to 50 characters. </li><li><code>FIRST_NAME</code>: previously we have already limited the length of this attribute to 25 characters.</li><li><code>BIRTH_DATE</code>: logically, it stores a date .</li><li><code>NATIONALITY</code>: Will store character strings with a maximum length of 30.</li><li><code>EMAIL</code>: Will also store strings up to 100 characters.</li><li><code>PHONE</code>: it will store only the digits, without spaces or prefix.</li></ul><p>In addition, you must force that the <code> attributes LAST_NAME</code>, <code>FIRST_NAME</code> and <code>EMAIL</code> of each row of the table has some value, not being allowed that and the value associated with these attributes is <code>NULL</code>.</p>