<h2>Begränsning <code>UNIQUE</code>.</h2><p>Det kommer att finnas tillfällen då vi är intresserade av att inte kunna upprepa värden i kolumnen, i dessa fall kommer vi att använda begränsningen <a HREF="https: //www.postgresql.org/docs/14/ddl-constraints.html#DDL-CONSTRAINTS-UNIQUE-CONSTRAINTS" target="_blank"><code>UNIQUE</code></a >. PostgreSQL skapar automatiskt ett index när denna begränsning är aktiverad och tar bort den när den är inaktiverad.</p><p>Också för denna begränsning har vi två möjliga sätt att skriva den, låt oss se det med ett exempel. Anta att <code>Login</code>-fältet i vår tabell kommer att vara unikt. Vi kommer att ta med det i tabellen vi skapar. Det skulle se ut så här:</p><blockquote><pre><code>SKAPA TABELLANVÄNDARE (<br /> Logga in VARCHAR(25)<br /> CONSTRAINT Use_Log_UK UNIQUE<br />);</code>< /pre ></blockquote><p>Låt oss se på ett annat sätt:</p><blockquote><pre><code>SKAPA TABELLANVÄNDARE (<br /> Logga in VARCHAR(25) UNIQUE<br />);</ code>< /pre></blockquote><p>Vi kan även lägga denna begränsning på flera fält samtidigt, till exempel om vi vill att <code>Login</code> och <code>EMAIL</code> ska vara unikt, vi skulle kunna uttrycka det så här:</p><blockquote><pre><code>SKAPA TABELLANVÄNDARE (<br /> Logga in VARCHAR(25),<br /> EMAIL VARCHAR(100),<br /> CONSTRAINT Users_UK UNIQUE (Login, EMAIL )<br />);</code></pre></blockquote><p>Om du märker att det bakom datatypen <code>EMAIL</code> finns ett kommatecken , det beror på att begränsningen är oberoende av det fältet och gemensam för flera. Det är därför vi efter <code>UNIQUE</code> har satt namnen på de fält som påverkas av begränsningen inom parentes.</p><h3>Övning:</h3><p>Som <code>EMAIL </p> code> bör inte upprepas för två olika elever, lägg till en begränsning i tabellen från föregående övning som hindrar två elever från att ha samma e-postadress.</p>