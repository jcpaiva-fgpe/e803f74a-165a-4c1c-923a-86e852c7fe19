<h2>Constraint <code>UNIQUE</code>.</h2><p>There will be occasions in which we are interested in not being able to repeat values ​​in the column, in these cases we will use the restriction <a HREF="https: //www.postgresql.org/docs/14/ddl-constraints.html#DDL-CONSTRAINTS-UNIQUE-CONSTRAINTS" target="_blank"><code>UNIQUE</code></a>. PostgreSQL automatically creates an index when this constraint is enabled and deletes it when it is disabled.</p><p>Also for this constraint we have two possible ways to write it, let's see it with an example. Suppose the <code>Login</code> field in our table is going to be unique. We will include it in the table we are creating. It would look like this:</p><blockquote><pre><code>CREATE TABLE USERS (<br /> Login VARCHAR(25)<br /> CONSTRAINT Use_Log_UK UNIQUE<br />);</code></pre ></blockquote><p>Let's see another way:</p><blockquote><pre><code>CREATE TABLE USERS (<br /> Login VARCHAR(25) UNIQUE<br />);</code>< /pre></blockquote><p>We can also put this restriction on several fields at once, for example, if we want <code>Login</code> and <code>EMAIL</code> to be unique, we could put it like this:</p><blockquote><pre><code>CREATE TABLE USERS (<br /> Login VARCHAR(25),<br /> EMAIL VARCHAR(100),<br /> CONSTRAINT Users_UK UNIQUE (Login, EMAIL )<br />);</code></pre></blockquote><p>If you notice, behind the data type of <code>EMAIL</code> there is a comma, that is because the restriction it is independent of that field and common to several. That is why after <code>UNIQUE</code> we have put the names of the fields affected by the restriction in parentheses.</p><h3>Exercise:</h3><p>Like <code>EMAIL </code> should not be repeated in two different students, add a restriction to the table from the previous exercise that prevents two students from having the same email.</p>